
valid_curl_get_result()
{
 get_url=$1
 check_valid_response=$2
 curl_result=$(curl -s -X GET  -H "Authorization: bearer $GIT_TOKEN" $get_url)

 if [ $( echo $curl_result | grep -c "\"$check_valid_response\"" ) -eq 0 ]; then
          echo "There was a problem with the GitHub API request for $get_url"
          echo $curl_result
          exit 1
 fi

}

valid_curl_post_result()
{
 post_url=$1
 data=$2
 check_valid_response=$3
 echo "$data" > /tmp/curl_data
 curl_result=$(curl -s -X POST -H "Authorization: bearer $GIT_TOKEN" --data @/tmp/curl_data $post_url)

 if [ $( echo $curl_result | grep -c "\"$check_valid_response\"" ) -eq 0 ]; then
          echo "There was a problem with the GitHub API request for url - $post_url ( check valid response $check_valid_response):"
          echo $curl_result
          exit 1
 fi

}


valid_curl_put_result()
{
 put_url=$1
 data=$2
 echo "$data" > /tmp/curl_data

 result=$(curl -i -s -X PUT -H "Authorization: bearer $GIT_TOKEN" --data @/tmp/curl_data $put_url)

 if [ $(echo $result | grep -cE "HTTP/[0-9\.]* 2[0-9][0-9]") -eq 0 ]; then
          echo "There was a problem with the GitHub API request for url - $put_url ( did not receive HTTP 2xx ) :"
          echo $result
          exit 1
 fi

}


get_last_tag()
{
if [ $(git describe --abbrev=0 --tags 2>/dev/null | wc -l) -gt 0 ]; then
   latestTag=`git describe --abbrev=0 --tags`
else
   latestTag=0.1
fi
}

get_dockerhub_buildhistory()
{
 repo=$1
 number_history=${2:-10}
 
 if [ -n "$JWT_DOCKERHUB_TOKEN" ]; then  
      curl_result=$( curl -s -I -H "Authorization: JWT ${JWT_DOCKERHUB_TOKEN}" --retry 5 --retry-delay 10 --max-time 15 -XGET "https://hub.docker.com/api/audit/v1/action/?include_related=true&limit=1&object=/api/repo/v1/repository/${repo}/")  || echo "Curl result code $?"
      if [ $(echo $curl_result | grep -c -i "401 unauthorized") -eq 1 ]; then
         #token has expired
         echo "DockerHub Token has expired, will unset it"
         unset JWT_DOCKERHUB_TOKEN
         JWT_DOCKERHUB_TOKEN=
      elif [ $(echo $curl_result | grep -c -i "200 OK") -eq 0 ]; then
         echo "DockebHub error, will exit"
         echo $curl_result
         exit 1
      fi
 fi

 if [ -z "$JWT_DOCKERHUB_TOKEN" ]; then
      echo "No DockerHub token found, requesting one"
      curl_result=$(curl -s -H "Content-Type: application/json" --retry 5 --retry-delay 10 --max-time 15 -X POST -d '{"username": "'${DOCKERHUB_USER}'", "password": "'${DOCKERHUB_PASS}'"}' https://hub.docker.com/v2/users/login/)  || echo "Curl result code $?"
      if [ $( echo $curl_result | grep -c "token" ) -eq 0 ]; then
          echo "There was a problem with the GitHub API request:"
          echo $curl_result
          exit 1
      fi
      export JWT_DOCKERHUB_TOKEN=$(echo $curl_result |  python -c "import sys, json; print json.load(sys.stdin).get('token')")
 fi     
 buildhistory=""
 count=20
 while [ -z "$buildhistory" ] && [ "$count" -gt 0 ]; do
   buildhistory=$( curl -s -H "Authorization: JWT ${JWT_DOCKERHUB_TOKEN}" --retry 5 --retry-delay 10 --max-time 15 -XGET "https://hub.docker.com/api/audit/v1/action/?include_related=true&limit=${number_history}&object=/api/repo/v1/repository/${repo}/" )  || echo "Curl result code $?"
   if [ -z "$buildhistory"]; then 
   
     echo "Received nothing from dockerhub, will retry in 20s"
     echo  "https://hub.docker.com/api/audit/v1/action/?include_related=true&limit=${number_history}&object=/api/repo/v1/repository/${repo}/" 
     curl -s -H "Authorization: JWT ${JWT_DOCKERHUB_TOKEN}" --retry 5 --retry-delay 10 --max-time 15 -XGET "https://hub.docker.com/api/audit/v1/action/?include_related=true&limit=${number_history}&object=/api/repo/v1/repository/${repo}/" 

     sleep 20
     let count=count-1
   fi
 done
 
 if [ $( echo $buildhistory | grep "meta" | wc -l ) -eq 0 ]; then
    echo "Check build history result, it looks like there is a problem"
    echo $buildhistory
 fi

}  
